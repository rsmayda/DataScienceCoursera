if (num!='best'){
numRes<-num
}
## For each state, find the hospital of the given rank
i<-1
for (s in unique(data[,7])){
# Reset data
tempDf <- df
# Subset Data
tempDf<- subset(df, stateAb == s)
# Drop levels
tempDf$stateAb<-as.character(tempDf$stateAb)
tempDf$hosName<-as.character(tempDf$hosName)
tempDf$out<-as.character(tempDf$out)
tempDf$out<-as.numeric(tempDf$out)
#Get rid of NAs
tempDf<-tempDf[complete.cases(tempDf$out),]
#Sort data
tempDf<- tempDf[order(tempDf$out, tempDf$hosName),]
#Store Data
if (num=='worst'){
numRes<-length(df$out)
}
finalDf[i,]<-tempDf[numRes,1:2]
i<-i+1
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
finalDf
}
rankall("heart attack",20)
states<-  order(unique(data[,7]))
states
unique(data[,7])
states<-  order(unique(as.character(data[,7])))
states
as.character(data[,7])
unique(as.character(data[,7]))
order(unique(as.character(data[,7])))
states<-  sort(unique(as.character(data[,7])))
states
?sort
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data))
# Set up return
finalDf<- data.frame(hospital=as.character(NA),state=as.character(NA))[rep(NA,54),]
finalDf$hospital<-as.character(finalDf$hospital)
finalDf$state<-as.character(finalDf$state)
# Adjust 'num'
numRes<-1
if (num!='best'){
numRes<-num
}
states<-sort(unique(as.character(data[,7])))
## For each state, find the hospital of the given rank
i<-1
for (s in states){
# Reset data
tempDf <- df
# Subset Data
tempDf<- subset(df, stateAb == s)
# Drop levels
tempDf$stateAb<-as.character(tempDf$stateAb)
tempDf$hosName<-as.character(tempDf$hosName)
tempDf$out<-as.character(tempDf$out)
tempDf$out<-as.numeric(tempDf$out)
#Get rid of NAs
tempDf<-tempDf[complete.cases(tempDf$out),]
#Sort data
tempDf<- tempDf[order(tempDf$out, tempDf$hosName),]
#Store Data
if (num=='worst'){
numRes<-length(df$out)
}
finalDf[i,]<-tempDf[numRes,1:2]
i<-i+1
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
finalDf
}
rankall("heart attack",20)
s<-'AK'
tempDf <- df
# Subset Data
tempDf<- subset(df, stateAb == s)
# Drop levels
tempDf$stateAb<-as.character(tempDf$stateAb)
tempDf$hosName<-as.character(tempDf$hosName)
tempDf$out<-as.character(tempDf$out)
tempDf$out<-as.numeric(tempDf$out)
#Get rid of NAs
tempDf<-tempDf[complete.cases(tempDf$out),]
#Sort data
tempDf<- tempDf[order(tempDf$out, tempDf$hosName),]
numRes<-20
tempDf[numRes,1:2]
finalDf[i,]<-tempDf[numRes,]
tempDf[numRes,]
tempDf<-tempDf[complete.cases(tempDf$out),]
tempDf[numRes,]
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data))
# Set up return
finalDf<- data.frame(hospital=as.character(NA),state=as.character(NA))[rep(NA,54),]
finalDf$hospital<-as.character(finalDf$hospital)
finalDf$state<-as.character(finalDf$state)
# Adjust 'num'
numRes<-1
if (num!='best'){
numRes<-num
}
states<-sort(unique(as.character(data[,7])))
## For each state, find the hospital of the given rank
i<-1
for (s in states){
# Reset data
tempDf <- df
# Subset Data
tempDf<- subset(df, stateAb == s)
# Drop levels
tempDf$stateAb<-as.character(tempDf$stateAb)
tempDf$hosName<-as.character(tempDf$hosName)
tempDf$out<-as.character(tempDf$out)
tempDf$out<-as.numeric(tempDf$out)
#Get rid of NAs
tempDf<-tempDf[complete.cases(tempDf$out),]
#Sort data
tempDf<- tempDf[order(tempDf$out, tempDf$hosName),]
#Store Data
if (num=='worst'){
numRes<-length(df$out)
}
finalDf[i,1]<-tempDf[numRes,1]
finalDf[i,2]<-s
i<-i+1
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
finalDf
}
rankall("heart attack",20)
finalDf
factor(finalDf        )
factor(order(finalDf[finalDf$state,])
factor(order(finalDf[finalDf$state,]))
factor(order(finalDf[finalDf$state,]))
str(finalDf)
dims(finalDf)
dim(finalDf)
names(finalDf)
levels(finalDf)
levels(finalDf)<-1:55
finalDf
attr(finalDf)
finalDf?
finalDf
?attr
attr(finalDf,'levels')
attr(finalDf,'dims')
finalDf<- data.frame(hospital=as.character(NA),state=as.character(NA))[rep(NA,54),]
finalDf$hospital<-as.character(finalDf$hospital)
finalDf$state<-as.character(finalDf$state)
finalDf
?data.frame
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data), stringsAsFactors = FALSE)
finalDf<- data.frame(hospital=as.character(NA),state=as.character(NA),stringsAsFactors = FALSE)[rep(NA,54),]
finalDf
str(finalDf)
#4 Ranking hospitals in all states
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data), stringsAsFactors = FALSE)
# Set up return
finalDf<- data.frame(hospital=as.character(NA),state=as.character(NA),stringsAsFactors = FALSE)[rep(NA,54),]
# Adjust 'num'
numRes<-1
if (num!='best'){
numRes<-num
}
states<-sort(unique(as.character(data[,7])))
## For each state, find the hospital of the given rank
i<-1
for (s in states){
# Reset data
tempDf <- df
# Subset Data
tempDf<- subset(df, stateAb == s)
# Drop levels
tempDf$out<-as.numeric(tempDf$out)
#Get rid of NAs
tempDf<-tempDf[complete.cases(tempDf$out),]
#Sort data
tempDf<- tempDf[order(tempDf$out, tempDf$hosName),]
#Store Data
if (num=='worst'){
numRes<-length(df$out)
}
finalDf[i,1]<-tempDf[numRes,1]
finalDf[i,2]<-s
i<-i+1
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
finalDf
}
rankall('heart failure', 20)
4 Ranking hospitals in all states
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data), stringsAsFactors = FALSE)
# Set up return
finalDf<- data.frame(hospital=as.character(NA),state=as.character(NA),stringsAsFactors = FALSE)[rep(NA,54),]
# Adjust 'num'
numRes<-1
if (num!='best'){
numRes<-num
}
states<-sort(unique(as.character(data[,7])))
## For each state, find the hospital of the given rank
i<-1
for (s in states){
# Reset data
tempDf <- df
# Subset Data
tempDf<- subset(df, stateAb == s)
# Drop levels
tempDf$out<-as.numeric(tempDf$out)
#Get rid of NAs
tempDf<-tempDf[complete.cases(tempDf$out),]
#Sort data
tempDf<- tempDf[order(tempDf$out, tempDf$hosName),]
#Store Data
if (num=='worst'){
numRes<-length(df$out)
}
finalDf[i,1]<-tempDf[numRes,1]
finalDf[i,2]<-s
i<-i+1
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
finalDf
}
#Helpers
getDataPoint <- function(outcome, data) {
if (outcome == 'heart attack')
data[,11]
else if (outcome =='heart failure')
data[,17]
else if (outcome =='pneumonia')
data[,23]
else
stop('invalid outcome')
}
rankall('heart failure', 20)
data <- read.csv("outcome-of-care-measures.csv")
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data), stringsAsFactors = FALSE)
outcome<-'heart failure'
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data), stringsAsFactors = FALSE)
# Set up return
finalDf<- data.frame(hospital=as.character(NA),state=as.character(NA),stringsAsFactors = FALSE)[rep(NA,54),]
numRes<-20
states<-sort(unique(as.character(data[,7])))
## For each state, find the hospital of the given rank
i<-1
for (s in states){
}
states<-sort(unique(data[,7]))
states<-sort(unique(as.character(data[,7])))
i<-1
for (s in states){
}
tempDf <- df
# Subset Data
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data), stringsAsFactors = FALSE)
df$stateAb<-as.character(df$stateAb)
df$hosName<-as.character(df$hosName)
df$out<-as.character(df$out)
df$out<-as.numeric(df$out)
# Set up return
finalDf<- data.frame(hospital=as.character(NA),state=as.character(NA),stringsAsFactors = FALSE)[rep(NA,54),]
# Adjust 'num'
states<-sort(unique(data[,7]))
states<-sort(unique(df$stateAb))
i<-1
tempDf <- df
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
outcome<-'heart failure'
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data))
df$stateAb<-as.character(df$stateAb)
df$hosName<-as.character(df$hosName)
df$out<-as.character(df$out)
df$out<-as.numeric(df$out)
# Set up return
finalDf<- data.frame(hospital=as.character(NA),state=as.character(NA),
stringsAsFactors = FALSE)[rep(NA,54),]
# Adjust 'num'
numRes<-1
if (num!='best'){
numRes<-num
}
states<-sort(unique(df$stateAb))
## For each state, find the hospital of the given rank
i<-1
for (s in states){
# Reset data
tempDf <- df
# Subset Data
tempDf<- subset(df, stateAb == s)
# Drop levels
tempDf$out<-as.numeric(tempDf$out)
#Get rid of NAs
tempDf<-tempDf[complete.cases(tempDf$out),]
#Sort data
tempDf<- tempDf[order(tempDf$out, tempDf$hosName),]
#Store Data
if (num=='worst'){
numRes<-length(df$out)
}
finalDf[i,1]<-tempDf[numRes,1]
finalDf[i,2]<-s
i<-i+1
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
finalDf
}
#Helpers
getDataPoint <- function(outcome, data) {
if (outcome == 'heart attack')
data[,11]
else if (outcome =='heart failure')
data[,17]
else if (outcome =='pneumonia')
data[,23]
else
stop('invalid outcome')
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data))
#drop levels
df$stateAb<-as.character(df$stateAb)
df$hosName<-as.character(df$hosName)
df$out<-as.character(df$out)
df$out<-as.numeric(df$out)
df<-df[complete.cases(df$out),] # Get rid of NAs
# Set up return
finalDf<- data.frame(hospital=as.character(NA),state=as.character(NA),
stringsAsFactors = FALSE)[rep(NA,54),]
# Adjust 'num'
numRes<-1
if (num!='best')
numRes<-num
states<-sort(unique(df$stateAb))
## For each state, find the hospital of the given rank
i<-1
for (s in states){
# Subset Data
tempDf<- subset(df, stateAb == s)
#Sort data
tempDf<- tempDf[order(tempDf$out, tempDf$hosName),]
#Store Data
if (num=='worst'){
numRes<-length(df$out)
}
finalDf[i,1]<-tempDf[numRes,1]
finalDf[i,2]<-s
i<-i+1
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
finalDf
}
#Helpers
getDataPoint <- function(outcome, data) {
if (outcome == 'heart attack')
data[,11]
else if (outcome =='heart failure')
data[,17]
else if (outcome =='pneumonia')
data[,23]
else
stop('invalid outcome')
}
head(rankall("heart attack", 20), 10)
states<-sort(unique(df$stateAb))
# Set up return
finalDf<- data.frame(hospital=as.character(NA),state=as.character(NA),
stringsAsFactors = FALSE, row.names = states)[rep(NA,54),]
?character
finalDf<- data.frame(hospital=rep(as.numeric(NA),54),state=as.character(NA),
stringsAsFactors = FALSE, row.names = states)
finalDf
#4 Ranking hospitals in all states
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data))
# Drop levels
df$stateAb<-as.character(df$stateAb)
df$hosName<-as.character(df$hosName)
df$out<-as.character(df$out)
df$out<-as.numeric(df$out)
df<-df[complete.cases(df$out),] # Get rid of NAs
# Get sorted state abrevs
states<-sort(unique(df$stateAb))
# Set up return
finalDf<- data.frame(hospital=rep(as.numeric(NA),54),state=as.character(NA),
stringsAsFactors = FALSE, row.names = states)
# Adjust 'num'
numRes<-1
if (num!='best')
numRes<-num
## For each state, find the hospital of the given rank
i<-1
for (s in states){
# Subset Data
tempDf<- subset(df, stateAb == s)
#Sort data
tempDf<- tempDf[order(tempDf$out, tempDf$hosName),]
#Store Data
if (num=='worst'){
numRes<-length(df$out)
}
finalDf[i,1]<-tempDf[numRes,1]
finalDf[i,2]<-s
i<-i+1
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
finalDf
}
#Helpers
getDataPoint <- function(outcome, data) {
if (outcome == 'heart attack')
data[,11]
else if (outcome =='heart failure')
data[,17]
else if (outcome =='pneumonia')
data[,23]
else
stop('invalid outcome')
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
options(warn=-1)
options(warn=-1)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
df<- data.frame(hosName = data[,2],stateAb=data[,7],out = getDataPoint(outcome, data))
# Drop levels
df$stateAb<-as.character(df$stateAb)
df$hosName<-as.character(df$hosName)
df$out<-as.character(df$out)
df$out<-as.numeric(df$out)
df<-df[complete.cases(df$out),] # Get rid of NAs
# Get sorted state abrevs
states<-sort(unique(df$stateAb))
# Set up return
finalDf<- data.frame(hospital=rep(as.numeric(NA),54),state=as.character(NA),
stringsAsFactors = FALSE, row.names = states)
# Adjust 'num'
numRes<-1
if (num!='best')
numRes<-num
## For each state, find the hospital of the given rank
i<-1
for (s in states){
# Subset Data
tempDf<- subset(df, stateAb == s)
#Sort data
tempDf<- tempDf[order(tempDf$out, tempDf$hosName),]
#Store Data
if (num=='worst'){
numRes<-length(tempDf$out)
}
finalDf[i,1]<-tempDf[numRes,1]
finalDf[i,2]<-s
i<-i+1
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
finalDf
}
#Helpers
getDataPoint <- function(outcome, data) {
if (outcome == 'heart attack')
data[,11]
else if (outcome =='heart failure')
data[,17]
else if (outcome =='pneumonia')
data[,23]
else
stop('invalid outcome')
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure"), 1000)
rankall("heart failure", 1000)
